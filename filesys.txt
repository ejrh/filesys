FILESYS DESIGN NOTES
Edmund Horner, 17 September 2004.

"Filesys" is to be a web application that allows browsing of the file system,
including prior versions of the file system.  It should provide integration
with other web applications such as the Image DB and the Experimental
Subversion Repository Browser.


DATA STRUCTRES

(See schema.sql for the actual database creation commands.)

The main structure in "filesys" should be a versioned directory hierarchy,
similar to what Subversion has.


EXAMPLE

In revision 1, games was created.
In revision 2, newstuff was added, games remained the same.
In revision 3, newstuff was removed, and games/list.txt was added.

    rev_id   time   root_id
    1        ...    1
    2        ...    3
    3        ...    5

    id   md5   descendants
    1    ...   1
    2    ...   0
    3    ...   2
    4    ...   0
    5    ...   2
    6    ...   1

    id   name        size   modified
    1    ''          ...    ...
    2    'games'     ...    ...
    3    ''          ...    ...
    4    'newstuff'  ...    ...
    5    ''          ...    ...
    6    'games'     ...    ...
    7    'list.txt'  ...    ...

    dir_id   file_id
    1        2
    3        2
    3        4
    5        6
    6        7


UPDATE ALGORITHM

  1. Starting at the virtual root '/':

  2. If this item is a directory, then get a list of its children:
      a. For each child item, get its size and modification date; or, if it's
         a directory, recur from 2.
      b. Combine each child item's stats into the stats for this item.
  3. If this item is a directory, look for an identical existing directory
     with a matching md5.
      a. If there is one, just return that existing directory.
  4. If this item is a file, look for an identical existing file
     with matching name/size/modification time.
      a. If there is one, just return the existing file.
  5. Create a new 'files' tuple.
  6. If it's a directory, create a new 'directories' tuple too.
  7. Return the item.

The script ?import can be used to apply this algorithm to the current file system.

To ensure that the latest Z: is included:

pgsql>  INSERT INTO file_in_dir VALUES
        (
            (SELECT id FROM file NATURAL JOIN directory
             WHERE name = 'Z:' AND children > 0 ORDER BY id DESC LIMIT 1),
            (SELECT id FROM file NATURAL JOIN directory
             WHERE name ='/' AND id IN (SELECT root_id FROM revision WHERE rev_id = 123))
        );
        
        INSERT INTO file_in_dir VALUES
        (
            (SELECT id FROM file NATURAL JOIN directory
             WHERE name = 'U:' AND children > 0 ORDER BY id DESC LIMIT 1),
            (SELECT id FROM file NATURAL JOIN directory
             WHERE name ='/' AND id IN (SELECT root_id FROM revision WHERE rev_id = 123))
        );

        INSERT INTO file_in_dir VALUES
        (
            (SELECT id FROM file NATURAL JOIN directory
             WHERE name = 'O:' AND children > 0 ORDER BY id DESC LIMIT 1),
            (SELECT id FROM file NATURAL JOIN directory
             WHERE name ='/' AND id IN (SELECT root_id FROM revision WHERE rev_id = 123))
        );

        INSERT INTO file_in_dir VALUES
        (
            (SELECT id FROM file NATURAL JOIN directory
             WHERE name = 'R:' AND children > 0 ORDER BY id DESC LIMIT 1),
            (SELECT id FROM file NATURAL JOIN directory
             WHERE name ='/' AND id IN (SELECT root_id FROM revision WHERE rev_id = 123))
        );

To remove any drives that turned out not to be valid drives:

pgsql>  DELETE FROM file
        WHERE name IN (SELECT CHR(i) || ':' FROM generate_series(65, 90) AS t(i))
        AND NOT EXISTS (SELECT * FROM file_in_dir WHERE dir_id = id);

The fix-dirs script should be run after extraneous files/directories have been
deleted.  Finally, some orphaned sub-files of these items will remain, and
should be deleted.  The following should be run repeatedly until no more rows
can be deleted:

pgsql>  DELETE FROM
            file
        WHERE
            name != '/'
            AND NOT EXISTS (SELECT file_id FROM file_in_dir WHERE file_id = id);


BROWSE ALGORITHM

Given a directory to look at, and maybe a revision.

  1. If no revision was specified, use the latest revision.
  2. Find the directory's id from a join of directories and files.
     The correct item has a matching directory name and the highest rev_id
     not larger than the specified revison.
  3. Get a list of items from file_in_dir.

To get the ids for the path components for '/E:/edmund/projects' in each
revision in which it changed:

    SELECT
        r.rev_id,
        f0.id,
        f1.id,
        f2.id,
        f3.id
    FROM
        revision AS r
        LEFT JOIN file AS f0 ON (r.root_id = f0.id)
        LEFT JOIN file_in_dir AS fd0 ON (f0.id = fd0.dir_id)
        LEFT JOIN file AS f1 ON (fd0.file_id = f1.id)
        LEFT JOIN file_in_dir AS fd1 ON (f1.id = fd1.dir_id)
        LEFT JOIN file AS f2 ON (fd1.file_id = f2.id)
        LEFT JOIN file_in_dir AS fd2 ON (f2.id = fd2.dir_id)
        LEFT JOIN file AS f3 ON (fd2.file_id = f3.id)
    WHERE
        f0.name = '/'
        AND f1.name = 'E:'
        AND f2.name = 'edmund'
        AND f3.name = 'stuff';

Since the Windows file system is case-insensitive (but case-retentive), some
paths may have changed case between revisions.  To take this into account,
instead of testing f2.name = 'edmund', a program should test
upper(fs.name) = 'EDMUND'.  This may impact negative on query efficiency since
indexes might not be used as much.


LINKS TO OTHER APPLICATIONS

  * Image files should show thumbnails if they're in the Image DB.
  * Subversion working copies should show status, and link to the Subversion
    Browser.
  * The Apache log data could be used to provide a download URL and date of
    download for a file.



SELECT
    r.rev_id, r.time, f1.id, f2.id, f2.name
FROM
    revision AS r
    JOIN file AS f1 ON r.root_id = f1.id
    JOIN file_in_dir AS fid ON f1.id = fid.dir_id
    JOIN file AS f2 ON fid.file_id = f2.id
WHERE
    r.rev_id >= (SELECT MAX(rev_id) FROM revision) - 6
    AND f2.name in ('O:','R:','U:','Z:')
ORDER BY
    r.rev_id, f2.name;
